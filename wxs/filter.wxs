module.exports = {
  toFixed: toFixed,
  toString: toString,
  slice: slice,
  findLastTime: findLastTime,
  skill: skill,
  game_mode: game_mode,
  dur: dur,
  pingfen: pingfen,
  calAttack: calAttack,
  getPrimaryAttr: getPrimaryAttr
}
function pingfen(arr){
  // 循环obj平均值
  var sum = 0
  var count=0
  for(var i=0;i<arr.length;i++){
    if (arr[i].pct){
      sum += arr[i].pct
      count++
    }
  }
  return toFixed(sum*10 / count,1)
}

function toFixed(a, b) {
  return a.toFixed(b)
}

function toString(a) {
  return a + ""
}

function slice(arr, start, end) {
  return arr ? arr.slice(start, end) : [];
}

function skill(a) {
  switch (a) {
    case 1:
      return 'Normal';
    case 2:
      return 'High';
    case 3:
      return 'Very High';
    default:
      return '联赛'
  }
}

function game_mode(a) {
  switch (a) {
    case 2:
      return '队长模式';
    case 22:
      return '全英雄选择';
    case 3:
      return '随机征召';
    case 4:
      return '个别征召';
    default:
      return 'unknown'
  }
}

function findLastTime(last_played) {
  var time = Date.now() / 1000 - last_played

  var year = parseInt(time / 60 / 60 / 24 / 30 / 12)
  if (year != 0) {
    return year + " 年之前"
  }
  var month = parseInt(time / 60 / 60 / 24 / 30) % 12
  if (month != 0) {
    return month + " 个月之前"
  }
  var day = parseInt(time / 60 / 60 / 24) % 30
  if (day != 0) {
    return day + " 天之前"
  }
  var hour = parseInt(time / 60 / 60) % 24
  if (hour != 0) {
    return hour + " 小时之前"
  }
  var min = parseInt(time / 60) % 60
  if (min != 0) {
    return min + " 分钟之前"
  }
  var sec = time % 60
  return sec + " 秒之前"
}

function dur(a) {
  var hour = parseInt(a / 3600)
  if (hour >= 1) {
    hour = hour + ":"
  } else {
    hour = ""
  }
  var min = parseInt(a % 3600 / 60)
  if (min < 10) {
    min = "0" + min + ":"
  } else {
    min = min + ":"
  }
  var sec = parseInt(a % 60)
  if (sec < 10) {
    sec = "0" + sec
  } else {
    sec = sec
  }
  return hour + min + sec
}

function calAttack(primary_attr, base_attack, base_int, base_str, base_agi) {
  switch (primary_attr) {
    case 'int':
      return base_attack + base_int;
    case 'str':
      return base_attack + base_str;
    case 'agi':
      return base_attack + base_agi;
    default:
      return 'unknown'
  }
}

function getPrimaryAttr(primary_attr){
  switch (primary_attr) {
    case 'int':
      return '智力';
    case 'str':
      return '力量';
    case 'agi':
      return '敏捷';
    default:
      return 'unknown'
  }
}